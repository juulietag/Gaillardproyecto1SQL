-- *****************************************
-- ENTREGA FINAL CURSO SQL PARTE 2
-- Autor: GAILLARD, JULIETA ANAHI
-- Fecha 03/04/2022
-- Version: 1.0
-- Revisado por: 
-- *****************************************


-- Crea la vista de la factura con el detalle de la condicion de pago para que el usuario pueda ver la info mas clara de cuando se debe pagar --

CREATE VIEW vista_factura_condicionpago
AS SELECT
   ID_factura AS N_Fact, 
   Total,
   Condicion AS Plazo_pago,
   Fecha
FROM
    factura,
    condicion_pago
WHERE
    plazo_de_pago = ID_plazo;
    
  -- Crea la vista de la suma total a pagar por proveedor --

CREATE VIEW vista_totalxproveedor
as SELECT proveedores.nombre, factura.Fecha, sum(factura.total)
FROM proveedores
INNER JOIN factura ON proveedores.ID_proveedor=factura.ID_proveedor
GROUP BY nombre
ORDER BY nombre;

-- Crea la vista del proveedor y su numero de contacto --

CREATE VIEW vista_proveedores
AS SELECT
   ID_proveedor,
   nombre AS RazonSocial, 
   Contacto
FROM
    proveedores
ORDER BY nombre;

-- Crea la vista de la suma del total de un proveedor especifico, en este caso INALPA --

CREATE VIEW VISTA_TOTAL_PROV_INALPA
AS SELECT SUM(Total), proveedores.nombre
FROM factura
INNER JOIN proveedores ON factura.ID_proveedor=proveedores.ID_proveedor 
WHERE proveedores.nombre like 'inalp%';

-- Crea la vista de las facturas que tienen IVA del 21% --

CREATE VIEW Facturas_IVA_21
AS
SELECT ID_factura, cantidad, precio, moneda,IVA  
FROM factura
WHERE IVA = 21.00;

-- Crea la funcion para calcular el precio  de un producto con IVA --

CREATE DEFINER=`root`@`localhost` FUNCTION `PRECIO_IVA`(param1 int, param2 DECIMAL(18,2)) 
RETURNS int
    DETERMINISTIC
begin
    DECLARE Resultado INT;
    set Resultado = (param1*param2);
    RETURN Resultado;
    END;
    
 -- ejemplo de prueba de la funcion -- 
SELECT PRECIO_IVA(200,1.21) AS PRECIOTOTAL;
   
   
   -- Creacion de la una funcion que muestra el total a pagar si la factura es en dolares --
   
   CREATE DEFINER=`root`@`localhost` FUNCTION `TotalUSD`(precio INT, cantidad int) RETURNS float
    NO SQL
begin
    DECLARE Resultado FLOAT;
    DECLARE USD FLOAT;
    SET USD = 108.56;
    SET Resultado = (precio*cantidad*USD);
RETURN Resultado;
END;
 -- ejemplo de prueba de la funcion 
select TotalUSD(100,2) as precioUSD;

-- el sp Ordenarproveedores permite visualizar la lista de proveedores ordenada por el campo nombre o el parametro que se defina --

USE entregafinal_gaillard;
DELIMITER //
CREATE PROCEDURE `Ordenarproveedores`(IN parametro1 CHAR(50))
BEGIN 
	IF parametro1 <> '' THEN
		SET @ordenar = CONCAT('ORDER BY ', parametro1) ;
ELSE
SET @ordenar = '' ;
END IF;

SET @clausula = CONCAT('SELECT * FROM proveedores ', @ordenar, ';');
PREPARE ejecutarSQL from @clausula;
EXECUTE ejecutarSQL;
DEALLOCATE PREPARE ejecutarSQL;
END //

CALL Ordenarproveedores('nombre') ;

-- el sp sp_crear_producto me permite crear un nuevo producto --

USE entregafinal_gaillard;
DELIMITER //
CREATE PROCEDURE sp_crear_producto(IN parametro1 int, in parametro2 int, in parametro3 char(100), in parametro4 char (100))
BEGIN
IF parametro1 <> '' THEN 
INSERT INTO entrega1_gaillard.producto (ID_producto,ID_proveedor,Descripción,Caracteristicas) VALUES (parametro1,parametro2,parametro3,parametro4);
SELECT * FROM entrega1_gaillard.producto ORDER BY ID_producto ;
ELSE 
SELECT 'Error, no se pudo crear el proveedor';
END IF;
END//

CALL sp_crear_producto ('10','3','Paquete de arroz','blanco');

-- creacion tabla movimientos factura --

CREATE TABLE movimientos_factura (
id_movimiento INT NOT NULL AUTO_INCREMENT,
fecha DATETIME NOT NULL,
usuario_id VARCHAR(45) NULL,
ID_factura INT NULL, 
precio FLOAT NULL DEFAULT 0, 
IVA FLOAT NULL DEFAULT 0, 
tipo_operacion VARCHAR(200) NULL,
PRIMARY KEY (id_movimiento));

-- creacion creacion trigger que muestra cuando, quien y donde se creo un nueva factura --

CREATE TRIGGER ins_mov_factura
AFTER INSERT ON factura
FOR EACH ROW
INSERT INTO movimientos_factura 
(id_movimiento, fecha, usuario_id, ID_factura, precio, IVA, tipo_operacion)
VALUES(NULL, NOW(), SESSION_USER(), NEW.ID_factura, NEW.precio, NEW.IVA, 'INSERT: Se insertó un nuevo registro en la tabla FACTURA.');

-- prueba de si el trigger funciona --
INSERT INTO factura 
VALUES (6, 3, 10026, 100, 'P030', 250000, 21.00, 'ARS', 30250000, '2021-11-13');
SELECT * FROM movimientos_factura;
SELECT * FROM FACTURA;

-- trigger muestra mensaje si la factura tiene fecha anterior al 2021 --
delimiter //
CREATE TRIGGER fechafactura_check 
BEFORE INSERT ON factura
FOR EACH ROW
BEGIN DECLARE msg VARCHAR(500);
IF (NEW.Fecha < '2021-01-01' ) THEN 
SET msg = "NO SE PERMINTEN FACT ANTERIORES A 2021";
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = msg;
END IF;
END//

-- prueba del trigger con fecha anterior a 2021 --
INSERT INTO factura 
VALUES (2, 5, 10027, 100, 'P030', 250000, 21.00, 'ARS', 30250000, '2020-11-13');
SELECT * FROM movimientos_factura;
SELECT * FROM FACTURA;

-- creacion tabla que muestra los movimentos realizados en la tabla producto --

CREATE TABLE movimientos_producto (
id_movimiento INT NOT NULL AUTO_INCREMENT,
fecha DATE NOT NULL,
hora TIME,
usuario_id VARCHAR(45) NULL,
base_de_datos VARCHAR(50) NULL,
ID_producto INT NULL,
Descripción VARCHAR(50), 
tipo_operacion VARCHAR(200) NULL,
PRIMARY KEY (id_movimiento));

-- creacion trigger que muestra cuando, quien y donde se creo un nuevo producto --
CREATE TRIGGER ins_productos
AFTER INSERT ON producto
FOR EACH ROW
INSERT INTO movimientos_producto
(id_movimiento, fecha, hora, usuario_id, base_de_datos, ID_producto, Descripción, tipo_operacion)
VALUES(NULL, CURRENT_DATE(), CURRENT_TIME(), USER(), DATABASE(), NEW.ID_producto, NEW.Descripción, 'INSERT: Se insertó un nuevo registro en la tabla PRODUCTO.');

-- prueba del trigger --
INSERT INTO producto
VALUES (8, 4, 'Paquete de arroz', 'Integral');
SELECT * FROM movimientos_producto;
SELECT * FROM PRODUCTO;

